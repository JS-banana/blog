(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{521:function(t,s,a){"use strict";a.r(s);var n=a(43),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"js类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js类型"}},[t._v("#")]),t._v(" JS类型")]),t._v(" "),a("p",[t._v("最新的 ECMAScript 标准定义了 8 种数据类型:")]),t._v(" "),a("ul",[a("li",[t._v("7种原始类型："),a("code",[t._v("Number")]),t._v("、"),a("code",[t._v("String")]),t._v("、"),a("code",[t._v("Boolean")]),t._v("、"),a("code",[t._v("Null")]),t._v("、"),a("code",[t._v("Undefined")]),t._v("、"),a("code",[t._v("Symbol")]),t._v("、"),a("code",[t._v("BigInt")])]),t._v(" "),a("li",[t._v("Object引用类型："),a("code",[t._v("Array")]),t._v("、"),a("code",[t._v("Object")]),t._v("、"),a("code",[t._v("Date")]),t._v("、"),a("code",[t._v("RegExp")]),t._v("、"),a("code",[t._v("Error")]),t._v("、"),a("code",[t._v("Map")]),t._v("、"),a("code",[t._v("Set")]),t._v("、"),a("code",[t._v("WeakMap")]),t._v("、"),a("code",[t._v("WeakSet")]),t._v("，几乎所有通过 "),a("code",[t._v("new")]),t._v(" 创建的，即构造函数类型")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Symbol类型")]),t._v("："),a("code",[t._v("Symbol")]),t._v(" "),a("ul",[a("li",[t._v("ECMAScript 2015 新增")]),t._v(" "),a("li",[t._v("符号（"),a("code",[t._v("Symbols")]),t._v("）类型是"),a("strong",[t._v("唯一")]),t._v("且"),a("strong",[t._v("不可修改")]),t._v("的原始值")]),t._v(" "),a("li",[t._v("可以用来作为对象的键(key)")])])]),t._v(" "),a("li",[a("strong",[t._v("BigInt类型")]),t._v("："),a("code",[t._v("BigInt")]),t._v(" "),a("ul",[a("li",[t._v("ECMAScript 2020 新增")]),t._v(" "),a("li",[a("code",[t._v("BigInt")]),t._v(" 可以表示任意大的整数。")]),t._v(" "),a("li",[t._v("可以用在一个整数字面量后面加 "),a("code",[t._v("n")]),t._v(" 的方式定义一个 "),a("code",[t._v("BigInt")]),t._v(" ，如："),a("code",[t._v("10n")]),t._v("，或者调用函数 "),a("code",[t._v("BigInt()")]),t._v("（但不包含 "),a("code",[t._v("new")]),t._v(" 运算符）并传递一个整数值或字符串值。")])])])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1n")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bigint'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BigInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bigint'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/JS-banana/images/emoji/3.jpg",alt:"emoji"}})]),t._v(" "),a("h3",{attrs:{id:"堆和栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#堆和栈"}},[t._v("#")]),t._v(" 堆和栈")]),t._v(" "),a("p",[t._v("为了更清晰的明白数据在内存中的存储结构，在介绍数据类型之前我们先了解下堆和栈的概念。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("栈(stack)")]),t._v("：是栈内存的简称，栈是自动分配相对固定大小的内存空间，并由系统自动释放，栈数据结构遵循"),a("code",[t._v("FILO")]),t._v("（first in last out）先进后出的原则")]),t._v(" "),a("li",[a("strong",[t._v("堆(heap)")]),t._v("：是堆内存的简称，堆是动态分配内存，内存大小不固定，也不会自动释放，堆数据结构是一种无序的树状结构")])]),t._v(" "),a("p",[t._v("在JS中的存在形式以及我们应该如何理解：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("基本数据类型")]),t._v("：都是直接按值存放在栈内存中，占用的内存空间的大小是确定的，并由系统自动分配和自动释放。\n"),a("ul",[a("li",[t._v("包括："),a("code",[t._v("Number")]),t._v("、"),a("code",[t._v("String")]),t._v("、"),a("code",[t._v("Boolean")]),t._v("、"),a("code",[t._v("Null")]),t._v("、"),a("code",[t._v("Undefined")]),t._v("、"),a("code",[t._v("Symbol")]),t._v("、"),a("code",[t._v("BigInt")])]),t._v(" "),a("li",[t._v("这样带来的好处就是，内存可以及时得到回收，相对于堆来说，更加容易管理内存空间")])])]),t._v(" "),a("li",[a("strong",[t._v("引用数据类型")]),t._v("：指那些可能由多个值构成的对象\n"),a("ul",[a("li",[t._v("如对象("),a("code",[t._v("Object")]),t._v(")、数组("),a("code",[t._v("Array")]),t._v(")、函数("),a("code",[t._v("Function")]),t._v(") ，它们是通过拷贝和"),a("code",[t._v("new")]),t._v("出来的，这样的数据存储于堆中")])])])]),t._v(" "),a("p",[t._v("传值和传址的区别：")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("基本类型")]),t._v("：采用的是值传递。\n"),a("ul",[a("li",[t._v("基本类型是把数据的值存储于栈中")]),t._v(" "),a("li",[t._v("在赋值的时候，会把值复制一份到栈中，然后把栈顶的"),a("em",[t._v("值赋给变量")])])])]),t._v(" "),a("li",[a("strong",[t._v("引用类型")]),t._v("：则是地址传递\n"),a("ul",[a("li",[t._v("引用类型的是把数据的地址指针存储于栈中")]),t._v(" "),a("li",[t._v("在赋值的时候是将存放在栈内存中的"),a("em",[t._v("地址指针赋值给接收的变量")])])])])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. 基本类型")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// b被赋值为a，传递的是值1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a 1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// b 2")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2. 引用类型")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// obj2被赋值为obj1，传递的是地址")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'zhangsan'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("age")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// obj1、obj2都会变化，因为地址指向的是同一个")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// obj1 {name: 'zhangsan', age: 20}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// obj2 {name: 'zhangsan', age: 20}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br")])]),a("blockquote",[a("p",[t._v("延伸：浅拷贝、深拷贝的作用")])]),t._v(" "),a("h3",{attrs:{id:"null和undefined区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#null和undefined区别"}},[t._v("#")]),t._v(" null和undefined区别")]),t._v(" "),a("ul",[a("li",[t._v("都是基本数据类型，这两个基本数据类型分别都只有一个值，就是 "),a("code",[t._v("undefined")]),t._v(" 和 "),a("code",[t._v("null")])]),t._v(" "),a("li",[a("code",[t._v("undefined")]),t._v(" 代表的含义是未定义，"),a("code",[t._v("null")]),t._v(" 代表的含义是空对象。\n"),a("ul",[a("li",[t._v("一般变量声明了但还没有定义的时候会返回 "),a("code",[t._v("undefined")]),t._v("，"),a("code",[t._v("null")]),t._v("主要用于赋值给一些可能会返回对象的变量，作为初始化。")])])]),t._v(" "),a("li",[a("code",[t._v("undefined")]),t._v(" 在 JavaScript 中不是一个保留字\n"),a("ul",[a("li",[t._v("这意味着可以使用 "),a("code",[t._v("undefined")]),t._v(" 来作为一个变量名，但是这样的做法是非常危险的，它会影响对 "),a("code",[t._v("undefined")]),t._v(" 值的判断。我们可以通过一些方法获得安全的 "),a("code",[t._v("undefined")]),t._v(" 值，比如说 "),a("code",[t._v("void 0")]),t._v("。")])])]),t._v(" "),a("li",[t._v("当对这两种类型使用 "),a("code",[t._v("typeof")]),t._v(" 进行判断时，"),a("code",[t._v("Null")]),t._v(" 类型会返回 "),a("code",[t._v("“object”")]),t._v("，这是一个历史遗留的问题（见下面类型判断部分）。")]),t._v(" "),a("li",[t._v("当使用双等号对两种类型的值进行比较时会返回 "),a("code",[t._v("true")]),t._v("，使用三个等号时会返回 "),a("code",[t._v("false")]),t._v("。")])]),t._v(" "),a("p",[t._v("拓展：")]),t._v(" "),a("ul",[a("li",[t._v("在实际开发过程中会使用 "),a("code",[t._v("if(xx == null)")]),t._v(" 来判断变量 "),a("code",[t._v("xx")]),t._v("是否为"),a("code",[t._v("undefined")]),t._v("和"),a("code",[t._v("null")]),t._v("，这样可以更加简洁。（在目前最新的语法中"),a("code",[t._v("??")]),t._v("就是只针对"),a("code",[t._v("undefined")]),t._v("和"),a("code",[t._v("null")]),t._v("做判断处理的，如 "),a("code",[t._v("let a = xx ?? 123")]),t._v("）")]),t._v(" "),a("li",[t._v("使用引用类型时在数据不使用的时候赋值为"),a("code",[t._v("null")]),t._v("，这样可以避免内存泄漏。")])]),t._v(" "),a("h3",{attrs:{id:"_0-1-0-2-0-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0-1-0-2-0-3"}},[t._v("#")]),t._v(" 0.1+0.2 ! == 0.3")]),t._v(" "),a("p",[t._v("计算机是通过二进制的方式存储数据的，所以计算机计算"),a("code",[t._v("0.1+0.2")]),t._v("的时候，实际上是计算两个数的二进制的和，但是这两个数的二进制都是无限循环的数。")]),t._v(" "),a("p",[t._v("一般我们认为数字包括整数和小数，但是在 JavaScript 中只有一种数字类型："),a("code",[t._v("Number")]),t._v("，它的实现遵循"),a("strong",[t._v("IEEE 754标准")]),t._v("，使用64位固定长度来表示，也就是标准的"),a("code",[t._v("double")]),a("strong",[t._v("双精度浮点数")]),t._v("。")]),t._v(" "),a("p",[t._v("在二进制科学表示法中，双精度浮点数的小数部分最多"),a("strong",[t._v("只能保留52位")]),t._v("，再加上前面的1，其实就是保留53位有效数字，剩余的需要舍去，遵从"),a("strong",[t._v("0舍1入")]),t._v("的原则。")]),t._v(" "),a("p",[t._v("根据这个原则，0.1和0.2的二进制数相加，再转化为十进制数就是："),a("code",[t._v("0.30000000000000004")]),t._v("。")]),t._v(" "),a("p",[t._v("如何实现 "),a("code",[t._v("0.1+0.2=0.3")]),t._v(":")]),t._v(" "),a("p",[t._v("对于这个问题，一个直接的解决方法就是设置一个误差范围，通常称为“机器精度”。对JavaScript来说，这个值通常为"),a("code",[t._v("2^-52")]),t._v("，在ES6中，提供了"),a("code",[t._v("Number.EPSILON")]),t._v("属性，而它的值就是"),a("code",[t._v("2^-52")]),t._v("，只要判断"),a("code",[t._v("0.1+0.2-0.3")]),t._v("是否小于"),a("code",[t._v("Number.EPSILON")]),t._v("，如果小于，就可以判断为 "),a("code",[t._v("0.1+0.2 ===0.3")])]),t._v(" "),a("blockquote",[a("p",[t._v("Number.EPSILON 属性表示 1 与Number可表示的大于 1 的最小的浮点数之间的差值。")]),t._v(" "),a("p",[t._v("EPSILON 属性的值接近于 2.2204460492503130808472633361816E-16，或者 2^-52。")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("numberepsilon")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("arg1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("arg2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("                   \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("abs")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arg1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" arg2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("EPSILON")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("        \n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("numberepsilon")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("h3",{attrs:{id:"isnan-和-number-isnan-函数的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#isnan-和-number-isnan-函数的区别"}},[t._v("#")]),t._v(" isNaN 和 Number.isNaN 函数的区别")]),t._v(" "),a("ul",[a("li",[t._v("函数 "),a("code",[t._v("isNaN")]),t._v(" 接收参数后，会尝试将这个参数转换为数值，任何不能被转换为数值的的值都会返回 "),a("code",[t._v("true")]),t._v("，因此非数字值传入也会返回 "),a("code",[t._v("true")]),t._v(" ，会影响 "),a("code",[t._v("NaN")]),t._v(" 的判断。")]),t._v(" "),a("li",[t._v("函数 "),a("code",[t._v("Number.isNaN")]),t._v(" 会首先判断传入参数是否为数字，如果是数字再继续判断是否为 "),a("code",[t._v("NaN")]),t._v(" ，不会进行数据类型的转换，这种方法对于 "),a("code",[t._v("NaN")]),t._v(" 的判断更为准确。")])]),t._v(" "),a("h2",{attrs:{id:"js类型判断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js类型判断"}},[t._v("#")]),t._v(" JS类型判断")]),t._v(" "),a("h3",{attrs:{id:"typeof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typeof"}},[t._v("#")]),t._v(" typeof")]),t._v(" "),a("p",[a("code",[t._v("typeof")]),t._v(" 是由JS提供的，主要是检查数据类型，即这8种数据类型，不过对于引用类型返回值都是"),a("code",[t._v("Object")]),t._v("（function除外），无法做到正确区分是哪种具体类型，比较合适的方式是使用 "),a("code",[t._v("instanceof")]),t._v("关键字来判断引用类型。")]),t._v(" "),a("p",[t._v("返回值均为"),a("strong",[t._v("小写字符串")]),t._v("：如 "),a("code",[t._v('typeof undefined === "undefined"')]),t._v("、"),a("code",[t._v('typeof {} === "object"')])]),t._v(" "),a("h4",{attrs:{id:"特别注意"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特别注意"}},[t._v("#")]),t._v(" 特别注意")]),t._v(" "),a("ul",[a("li",[a("code",[t._v('typeof null === "object"')])])]),t._v(" "),a("blockquote",[a("p",[t._v('在 JavaScript 最初的实现中，JavaScript 中的值是由一个表示类型的标签和实际数据值表示的。对象的类型标签是 0。由于 null 代表的是空指针（大多数平台下值为 0x00），因此，null 的类型标签是 0，typeof null 也因此返回 "object"。')])]),t._v(" "),a("ul",[a("li",[t._v("typeof可以检测出函数类型")])]),t._v(" "),a("blockquote",[a("p",[t._v("除 Function 外的所有构造函数的类型都是 'object'")])]),t._v(" "),a("p",[t._v("两个特殊：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("undefined")]),t._v("（JSVAL_VOID）是整数"),a("code",[t._v("−2^30")]),t._v("（整数范围之外的数字）")]),t._v(" "),a("li",[a("code",[t._v("null")]),t._v("(JSVAL_NULL) 为机器码"),a("code",[t._v("NULL")]),t._v("的空指针，或者说：为"),a("code",[t._v("0")]),t._v("的object类型标签。")])]),t._v(" "),a("p",[t._v("在判断数据类型时，是根据机器码低位标识来判断的，而"),a("strong",[t._v("null的机器码标识全为0")]),t._v("，而对象的机器码低位标识为000。所以"),a("code",[t._v("typeof null")]),t._v("的结果被误判为"),a("code",[t._v("Object")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// function")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" func "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" func"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回 'function'")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("h3",{attrs:{id:"instanceof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#instanceof"}},[t._v("#")]),t._v(" instanceof")]),t._v(" "),a("p",[a("code",[t._v("instanceof")]),t._v(" 运算符用于检测构造函数的 "),a("code",[t._v("prototype")]),t._v(" 属性是否出现在某个实例对象的原型链上。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" boy "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("boy "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true，因为 Object.getPrototypeOf(o) === C.prototype")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("boy "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true，因为 Object.prototype.isPrototypeOf(o) 返回 true")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("D")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 继承")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" o3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("D")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\no3 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true 因为 Person.prototype 现在在 o3 的原型链上")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[t._v("Tips：有一个逐级向上查找的过程（原型的终点是"),a("code",[t._v("null")]),t._v("）")]),t._v(" "),a("p",[a("code",[t._v("o => Person.prototype => Object.prototype => null")])]),t._v(" "),a("p",[t._v("实现原理：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("myInstanceof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" right")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取对象的原型")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" proto "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPrototypeOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("left"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取构造函数的 prototype 对象")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" prototype "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" right"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n \n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断构造函数的 prototype 对象是否在对象的原型链上")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("proto"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("proto "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果没有找到，就继续从其原型上找，Object.getPrototypeOf方法用来获取指定对象的原型")]),t._v("\n    proto "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPrototypeOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("proto"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// console.log(myInstanceof(boy, Person)) // true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// console.log(myInstanceof(boy, Object)) // true")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br")])]),a("h3",{attrs:{id:"object-prototype-tostring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-prototype-tostring"}},[t._v("#")]),t._v(" Object.prototype.toString")]),t._v(" "),a("p",[a("code",[t._v("toString()")]),t._v(" 方法返回一个表示该对象的字符串。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [object Date]")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("同样是检测对象"),a("code",[t._v("obj")]),t._v("调用"),a("code",[t._v("toString")]),t._v("方法，"),a("code",[t._v("obj.toString()")]),t._v("的结果和"),a("code",[t._v("Object.prototype.toString.call(obj)")]),t._v("的结果不一样，这是为什么？")]),t._v(" "),a("p",[t._v("这是因为"),a("code",[t._v("toString")]),t._v("是"),a("code",[t._v("Object")]),t._v("的原型方法，而"),a("code",[t._v("Array")]),t._v("、"),a("code",[t._v("function")]),t._v("等类型作为"),a("code",[t._v("Object")]),t._v("的实例，都"),a("strong",[t._v("重写了toString方法")]),t._v("。")]),t._v(" "),a("p",[t._v("目前该种检测方法算是比较全面准确的，且使用较为广泛的一种。")]),t._v(" "),a("h3",{attrs:{id:"isarray"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#isarray"}},[t._v("#")]),t._v(" isArray")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isArray")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h3",{attrs:{id:"类型检查通用方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型检查通用方法"}},[t._v("#")]),t._v(" 类型检查通用方法")]),t._v(" "),a("ul",[a("li",[t._v("官方版本")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fullClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// get toPrototypeString() of obj (handles all types)")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Early JS environments return '[object Object]' for null, so it's best to directly check for it.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fullClass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'[object Null]'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toLowerCase")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// implicit toString() conversion")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" deepType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toLowerCase")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("deepType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'generatorfunction'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'function'")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Prevent overspecificity (for example, [object HTMLDivElement], etc).")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Account for functionish Regexp (Android <=2.3), functionish <object> element (Chrome <=57, Firefox <=52), etc.")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// String.prototype.match is universally supported.")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" deepType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^(array|bigint|date|error|function|generator|regexp|symbol)$")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" deepType\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'object'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'function'")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'object'")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" obj\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br")])]),a("ul",[a("li",[t._v("Jquery版本")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" class2type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 生成class2type映射")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Boolean Number String Function Array Date RegExp Object Error"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('" "')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    class2type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"[object "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" item "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"]"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toLowerCase")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("type")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("obj")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一箭双雕")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"object"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"function"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v("\n        class2type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"object"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br")])]),a("h2",{attrs:{id:"类型转换、相等（-）判断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型转换、相等（-）判断"}},[t._v("#")]),t._v(" 类型转换、相等（==）判断")]),t._v(" "),a("p",[t._v("等于运算符（"),a("code",[t._v("==")]),t._v("）检查其两个操作数是否相等，并返回"),a("code",[t._v("Boolean")]),t._v("结果。与严格相等运算符（"),a("code",[t._v("===")]),t._v("）不同，它会尝试"),a("strong",[t._v("强制类型转换")]),t._v("并且"),a("strong",[t._v("比较不同类型")]),t._v("的操作数。")]),t._v(" "),a("p",[t._v("相等运算符（"),a("code",[t._v("==")]),t._v("和"),a("code",[t._v("!=")]),t._v("）使用抽象相等比较算法比较两个操作数。可以大致概括如下：")]),t._v(" "),a("ul",[a("li",[t._v("如果两个操作数"),a("strong",[t._v("都是对象")]),t._v("，则仅当两个操作数都引用同一个对象时才返回"),a("code",[t._v("true")]),t._v("。")]),t._v(" "),a("li",[t._v("如果一个操作数"),a("strong",[t._v("是null")]),t._v("，另一个操作数"),a("strong",[t._v("是undefined")]),t._v("，则返回"),a("code",[t._v("true")]),t._v("。（"),a("code",[t._v("undefined == null")]),t._v("）")]),t._v(" "),a("li",[t._v("如果两个操作数是"),a("strong",[t._v("不同类型的")]),t._v("，就会尝试在比较之前"),a("strong",[t._v("将它们转换为相同类型")]),t._v("：\n"),a("ul",[a("li",[t._v("当"),a("strong",[t._v("数字")]),t._v("与"),a("strong",[t._v("字符串")]),t._v("进行比较时，会尝试"),a("strong",[t._v("将字符串转换为数字值")]),t._v("。")]),t._v(" "),a("li",[t._v("如果操作数"),a("strong",[t._v("之一是Boolean")]),t._v("，则将布尔操作数转换为"),a("strong",[t._v("1或0")]),t._v("。")]),t._v(" "),a("li",[t._v("如果操作数"),a("strong",[t._v("之一是对象")]),t._v("，另一个是数字或字符串，会尝试使用对象的"),a("code",[t._v("valueOf()")]),t._v("和"),a("code",[t._v("toString()")]),t._v("方法将对象转换为"),a("strong",[t._v("原始值")]),t._v("。")])])]),t._v(" "),a("li",[t._v("如果操作数具有相同的类型，则对值进行比较")])]),t._v(" "),a("h3",{attrs:{id:"一些说明，针对对象转换的情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一些说明，针对对象转换的情况"}},[t._v("#")]),t._v(" 一些说明，针对对象转换的情况")]),t._v(" "),a("p",[t._v("目的就是为了转换为原始值")]),t._v(" "),a("p",[t._v("为了进行转换，JavaScript 尝试查找并调用三个对象方法："),a("code",[t._v("Symbol.toPrimitive")]),t._v("、"),a("code",[t._v("toString")]),t._v("、"),a("code",[t._v("valueOf")])]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Symbol.toPrimitive")]),t._v("优先级最高，不过这只限于存在"),a("code",[t._v("Symbol")]),t._v("类型时")]),t._v(" "),a("li",[t._v("对于字符串转换：优先级是 "),a("code",[t._v("toString() > valueOf()")])]),t._v(" "),a("li",[t._v("对于数学运算：优先级是 "),a("code",[t._v("valueOf() > toString()")])])]),t._v(" "),a("p",[t._v("看个列子：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" user "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"John"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nuser"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [object Object]")]),t._v("\nuser"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// user.valueOf() === user // true valueOf方法返回对象本身 {name: 'John'}")]),t._v("\n\nuser "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'[object Object]'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("默认情况下，普通对象具有 "),a("code",[t._v("toString")]),t._v(" 和 "),a("code",[t._v("valueOf")]),t._v(" 方法：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("toString")]),t._v(" 方法返回一个字符串 "),a("code",[t._v('"[object Object]"')])]),t._v(" "),a("li",[a("code",[t._v("valueOf")]),t._v(" 方法返回"),a("strong",[t._v("对象自身")])])]),t._v(" "),a("p",[t._v("历史原因：")]),t._v(" "),a("p",[t._v("由于历史原因，如果 "),a("code",[t._v("toString")]),t._v(" 或 "),a("code",[t._v("valueOf")]),t._v(" 返回一个对象，则不会出现 error，但是这种值会被忽略（就像这种方法根本不存在）。这是因为在 JavaScript 语言发展初期，没有很好的 “error” 的概念。")]),t._v(" "),a("p",[t._v("相反，"),a("code",[t._v("Symbol.toPrimitive")]),t._v(" "),a("strong",[t._v("必须返回一个原始值")]),t._v("，否则就会出现 error。")]),t._v(" "),a("p",[t._v("验证数学运算：")]),t._v(" "),a("p",[t._v("从上面的规则我们知道数学运算转换规则的优先级是："),a("code",[t._v("valueOf() > toString()")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// toString 在没有其他方法的情况下处理所有转换")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 4，对象被转换为原始值字符串 "2"，之后它被乘法转换为数字 2')]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("转换过程：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("对象被转换为原始值（"),a("code",[t._v("valueOf")]),t._v("）")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {toString: ƒ} 对象本身")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])])]),t._v(" "),a("li",[a("p",[t._v("如果生成的原始值的类型不正确，则继续进行转换（"),a("code",[t._v("toString")]),t._v("）")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '2' 字符串")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])])])]),t._v(" "),a("h4",{attrs:{id:"对象-原始值转换的阶段性总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象-原始值转换的阶段性总结"}},[t._v("#")]),t._v(" 对象 — 原始值转换的阶段性总结")]),t._v(" "),a("p",[t._v("对象到原始值的转换，是由许多期望以原始值作为值的内建函数和运算符自动调用的。")]),t._v(" "),a("p",[t._v("这里有三种类型（"),a("strong",[t._v("hint")]),t._v("）：")]),t._v(" "),a("ul",[a("li",[t._v('"string"（对于 alert 和其他需要字符串的操作）')]),t._v(" "),a("li",[t._v('"number"（对于数学运算）')]),t._v(" "),a("li",[t._v('"default"（少数运算符）')])]),t._v(" "),a("blockquote",[a("p",[t._v('规范明确描述了哪个运算符使用哪个 hint。很少有运算符“不知道期望什么”并使用 "default" hint。通常对于内建对象，"default" hint 的处理方式与 "number" 相同，因此在实践中，最后两个 hint 常常合并在一起。')])]),t._v(" "),a("p",[t._v("转换算法是：")]),t._v(" "),a("ol",[a("li",[t._v("调用 "),a("code",[t._v("obj[Symbol.toPrimitive](hint)")]),t._v(" 如果这个方法存在")]),t._v(" "),a("li",[t._v('否则，如果 hint 是 "string"\n'),a("ul",[a("li",[t._v("尝试 "),a("code",[t._v("obj.toString()")]),t._v(" 和 "),a("code",[t._v("obj.valueOf()")]),t._v("，无论哪个存在。")])])]),t._v(" "),a("li",[t._v('否则，如果 hint 是 "number" 或者 "default"\n'),a("ul",[a("li",[t._v("尝试 "),a("code",[t._v("obj.valueOf()")]),t._v(" 和 "),a("code",[t._v("obj.toString()")]),t._v("，无论哪个存在。")])])])]),t._v(" "),a("h3",{attrs:{id:"一个简单测试"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一个简单测试"}},[t._v("#")]),t._v(" 一个简单测试")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" string3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" string4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" string4"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("以上题目应该类比于下面的写法，即通过 "),a("code",[t._v("new")]),t._v(" 构造的为对象类型，需要根据对象和对象的比较规则判断（因为是两个不同的引用地址，所以返回"),a("code",[t._v("false")]),t._v("）")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" object1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"key"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" object2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string-property property"}},[t._v('"key"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"value"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nobject1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" object2 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("数据类型做为一门语言的基础，是一个非常重要的概念。对于这方面的知识点一定要弄清楚，并深入理解，这样才能更好地应用在 JavaScript 中。")]),t._v(" "),a("p",[t._v("各种面试题的变种和骚操作，都是来自对语言的深入理解，对于一个 "),a("code",[t._v("toString")]),t._v("的使用，就可以玩出很多花样来。")]),t._v(" "),a("p",[t._v("不过，由于JS的诞生背景比较特殊，我们现在再回头深入学习JS的时候，经常会发现一些有坑的地方，各种历史遗留和设计之类的问题等。对于这些“特性”我们也应该有所了解，做到知其然、知其所以然。但是，我们也不能以偏概全，不得不说JS确实是一门非常强大的语言（毕竟能用JS实现的最终都会用JS实现🤪）")]),t._v(" "),a("p",[t._v("新的ECMAScript规范和标准也在不断地完善JS语言，各种新特性，如ES6、ES7等等，以及TypeScript的出现，也使得JS这门语言更加丰富规范（扶我起来，我还能学🤓）")]),t._v(" "),a("h2",{attrs:{id:"资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#资料"}},[t._v("#")]),t._v(" 资料")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript 数据类型和数据结构"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog/issues/28",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript专题之类型判断"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.zhihu.com/question/21691758",target:"_blank",rel:"noopener noreferrer"}},[t._v('为什么JavaScript里面typeof(null)的值是"object"？'),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.cn/post/6844903841952071693",target:"_blank",rel:"noopener noreferrer"}},[t._v("【译】谈谈“typeof null为object”这一bug的由来"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof",target:"_blank",rel:"noopener noreferrer"}},[t._v("typeof"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Equality",target:"_blank",rel:"noopener noreferrer"}},[t._v("Equality (==)"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://zh.javascript.info/object-toprimitive",target:"_blank",rel:"noopener noreferrer"}},[t._v("对象 — 原始值转换"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=e.exports}}]);